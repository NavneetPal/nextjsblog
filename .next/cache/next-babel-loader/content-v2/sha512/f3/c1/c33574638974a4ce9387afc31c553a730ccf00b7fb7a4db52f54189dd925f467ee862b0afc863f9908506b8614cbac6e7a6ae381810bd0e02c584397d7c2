{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\reactPractice\\\\nextjsmainproject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://navneet:nakul@cluster0.aipts.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meet => ({\n      params: {\n        meetupId: meet._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://navneet:nakul@cluster0.aipts.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/HP/Desktop/reactPractice/nextjsmainproject/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Fragment","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meet","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","meetupData","id","title","address","image","description"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACnB,4FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,IAAD,KAAW;AAC5BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADJ;AADoB,KAAX,CAAZ;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACnB,4FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAACb,QAAQ,CAACqB,QAAD;AAAd,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLyB,MAAAA,UAAU,EAAC;AACTC,QAAAA,EAAE,EAAEL,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADK;AAETS,QAAAA,KAAK,EAACN,cAAc,CAACM,KAFZ;AAGTC,QAAAA,OAAO,EAACP,cAAc,CAACO,OAHd;AAITC,QAAAA,KAAK,EAACR,cAAc,CAACQ,KAJZ;AAKTC,QAAAA,WAAW,EAACT,cAAc,CAACS;AALlB;AADN;AADF,GAAP;AAWD;AAED,eAAe/B,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\nimport { Fragment } from \"react\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <Fragment>\r\n    \r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://navneet:nakul@cluster0.aipts.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meet) => ({\r\n      params: {\r\n        meetupId: meet._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  //fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://navneet:nakul@cluster0.aipts.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({ _id:ObjectId(meetupId) });\r\n\r\n  client.close();\r\n\r\n  console.log(meetupId);\r\n  return {\r\n    props: {\r\n      meetupData:{\r\n        id: selectedMeetup._id.toString(),\r\n        title:selectedMeetup.title,\r\n        address:selectedMeetup.address,\r\n        image:selectedMeetup.image,\r\n        description:selectedMeetup.description\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}